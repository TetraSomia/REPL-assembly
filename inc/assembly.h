#pragma once

#include "utils.h"

/*
** Assemble human readable instructions (Intel syntax) from 'inst'
** into binary opcodes in '*bytecode' of size '*bytecode_size' using nasm.
**
** Multiple instructions can be passed by separating them by a newline ('\n').
**
** No need to set '*bytecode or '*bytecode_size' to NULL/0.
** Do not pass NULL as any parameter nor an empty string for 'inst'.
**
** Returns 0 on success and 1 on error. The error is generated by NASM
** and its content can be read as a null-terminated string in '*bytecode'.
**
** The address returned in '*bytecode' is dynamically allocated
** and must be freed by the caller.
*/

int assemble(const char *inst, uint8_t **bytecode, size_t *bytecode_size);

/*
** Do the opposite of 'assemble' function using objdump.
**
** Cannot fail, but the disassembly will be inconsistent for invalid opcodes.
*/

void disassemble(const uint8_t *bytecode, size_t bytecode_size, char **inst);
